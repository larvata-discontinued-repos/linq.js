// Generated by CoffeeScript 1.6.3
(function() {
  var Enumerable, _;
  _ = function(obj) {
    if (obj instanceof _) {
      return obj;
    }
    if (!(this instanceof _)) {
      return new _(obj);
    }
  };
  Object.prototype.linq = function(target) {
    if (target != null) {
      return new Enumerable(target);
    }
    return new Enumerable(this);
  };
  return Enumerable = (function() {
    function Enumerable(data) {
      this.data = data;
    }

    Enumerable.prototype.where = function(func) {
      var i, ret, _i, _ref;
      ret = [];
      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (func(this.data[i], i)) {
          ret.push(this.data[i]);
        }
      }
      this.data = ret;
      return this;
    };

    Enumerable.prototype.select = function(func) {
      var i, ret, _i, _ref;
      ret = [];
      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        ret.push(func(this.data[i], i));
      }
      this.data = ret;
      return this;
    };

    Enumerable.prototype.selectMany = function(func) {};

    Enumerable.prototype.take = function(count) {
      this.data.splice(0, count);
      return this;
    };

    Enumerable.prototype.takeWhile = function(func) {
      var i, _i, _ref;
      i = 0;
      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (!func(this.data[i], i)) {
          break;
        }
      }
      this.data.splice(0, i);
      return this;
    };

    Enumerable.prototype.skip = function(count) {
      this.data.splice(count);
      return this;
    };

    Enumerable.prototype.skipWhile = function(func) {
      var i, _i, _ref;
      i = 0;
      for (i = _i = 0, _ref = this.data.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (func(this.data[i], i)) {
          break;
        }
      }
      this.data.splice(i);
      return this;
    };

    Enumerable.prototype.join = function() {};

    Enumerable.prototype.groupJoin = function() {};

    Enumerable.prototype.orderBy = function() {};

    Enumerable.prototype.orderByDescending = function() {};

    Enumerable.prototype.thenBy = function() {};

    Enumerable.prototype.thenByDescending = function() {};

    Enumerable.prototype.groupBy = function() {};

    Enumerable.prototype.concat = function(second) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = second.lenght; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        this.data.push(second[i]);
      }
      return this;
    };

    Enumerable.prototype.distince = function(func) {};

    Enumerable.prototype.union = function(func) {};

    Enumerable.prototype.intersect = function(func) {};

    Enumerable.prototype.except = function() {};

    Enumerable.prototype.reverse = function() {};

    Enumerable.prototype.sequenceEqual = function() {};

    Enumerable.prototype.defaultIfEmpty = function(source) {
      if (this.data.length === 0) {
        this.data = source;
      }
      return this;
    };

    return Enumerable;

  })();
})();
